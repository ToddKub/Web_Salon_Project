<?php

namespace App\Http\Controllers;

use App\Models\Booking;
use App\Models\Holiday;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\DB;
use RealRashid\SweetAlert\Facades\Alert;
use App\Models\Beautician;
use App\Models\Service;
use App\Models\AvailableTime;
use Illuminate\Support\Carbon;
use Stripe\Stripe;
use Stripe\PaymentIntent;
use Stripe\Checkout\Session;


class BookingController extends Controller
{
    public function store(Request $request)
    {
        $request->validate(
            [

                'service' => 'required',
                'time' => 'required',
                'date' => 'required|date_format:Y-m-d|after_or_equal:today',
                'beautician_name' => 'required',
                'payment_mode' => 'required',
            ],
            [
                'service.required' => '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£',
                'time.required' => '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤',
                'beautician_name.required' => '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ä‡πà‡∏≤‡∏á',

            ]
        );
        /* $servicePrice = [
            '‡∏ï‡πà‡∏≠‡∏Ç‡∏ô‡∏ï‡∏≤' => ['half' => 1000, 'full' => 1000],
            '‡∏™‡∏±‡∏Å‡∏Ñ‡∏¥‡πâ‡∏ß' => ['half' => 1600, 'full' => 1600],
            '‡∏ù‡∏±‡∏á‡∏™‡∏µ‡∏≠‡∏≤‡∏¢‡πÑ‡∏•‡πÄ‡∏ô‡∏≠‡∏£‡πå' => ['half' => 1200, 'full' => 1200],
            '‡∏ù‡∏±‡∏á‡∏™‡∏µ‡∏õ‡∏≤‡∏Å' => ['half' => 1000, 'full' => 1000],
        ];*/

        $selectedService = $request->service;
        $paymentMode = $request->payment_mode;

        $availableTimes = AvailableTime::pluck('time_slot')->toArray();

        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏à‡∏≠‡∏á
        $selectedDate = $request->date;
        $selectedTime = str_replace('.', ':', $request->time); // ‡πÅ‡∏õ‡∏•‡∏á '.' ‡πÄ‡∏õ‡πá‡∏ô ':'

        // ‡πÅ‡∏¢‡∏Å‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏Å‡∏±‡∏ô
        list($startTime, $endTime) = explode('->', $selectedTime);
        $startTime = str_replace('.', ':', trim($startTime));
        $endTime = str_replace('.', ':', trim($endTime));

        // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö
        try {
            $selectedStartDateTime = \Carbon\Carbon::createFromFormat('Y-m-d H:i', "{$selectedDate} {$startTime}");
            $selectedEndDateTime = \Carbon\Carbon::createFromFormat('Y-m-d H:i', "{$selectedDate} {$endTime}");
        } catch (\Exception $e) {
            return redirect()->back()->with('error', '‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á: ' . $e->getMessage());
        }

        $now = \Carbon\Carbon::now('Asia/Bangkok');
        $nowString = $now->toDateTimeString();
        $selectedStartString = $selectedStartDateTime->toDateTimeString();


        if ($selectedStartString <= $nowString) {
            return redirect()->back()->with('error', '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏à‡∏≠‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏ú‡πà‡∏≤‡∏ô‡∏°‡∏≤‡πÅ‡∏•‡πâ‡∏ß‡πÑ‡∏î‡πâ');
        }

        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô AvailableTime ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        $isValidTime = false;
        foreach ($availableTimes as $timeSlot) {
            $timeParts = explode('->', $timeSlot);
            if (count($timeParts) == 2) {
                $availableStartTime = str_replace('.', ':', trim($timeParts[0]));
                $availableEndTime = str_replace('.', ':', trim($timeParts[1]));

                try {
                    $availableStartDateTime = \Carbon\Carbon::createFromFormat('Y-m-d H:i', "{$selectedDate} {$availableStartTime}");
                    $availableEndDateTime = \Carbon\Carbon::createFromFormat('Y-m-d H:i', "{$selectedDate} {$availableEndTime}");

                    if ($selectedStartDateTime->between($availableStartDateTime, $availableEndDateTime)) {
                        $isValidTime = true;
                        break;
                    }
                } catch (\Exception $e) {
                    return redirect()->back()->with('error', '‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á: ' . $e->getMessage());
                }
            }
        }

        if (!$isValidTime) {
            return redirect()->back()->with('error', '‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏°‡πà‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î');
        }


        $servicePrice = Service::where('name', $selectedService)->firstOrFail();

        $existingBooking = Booking::where('date', $request->date)
            ->where('time', $request->time)
            ->where('beautician_name', $request->beautician_name)
            ->exists();

        if ($existingBooking) {
            return redirect()->back()->with('error', '‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢‡∏Ñ‡πà‡∏∞ ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡πÉ‡∏´‡πâ‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏±‡∏ô‡πÄ‡πÄ‡∏•‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡∏≠‡∏∑‡πà‡∏ô‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏∞ üôè');
        }

        if ($paymentMode == 'paylater') {
            // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡πÅ‡∏•‡∏∞‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô
            $price = $servicePrice->price;
            $booking = [
                'service' => $request->service,
                'time' => $request->time,
                'date' => $request->date,
                'beautician_name' => $request->beautician_name,
                'user_id' => Auth::user()->id,
                'price' => $price,
                'payment_status' => '‡∏à‡πà‡∏≤‡∏¢‡∏ó‡∏µ‡πà‡∏´‡∏•‡∏±‡∏á',
            ];
            Alert::success('‡∏à‡∏≠‡∏á‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à', '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡πÄ‡∏á‡∏¥‡∏ô‡πÉ‡∏´‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡πà‡∏≤‡∏¢‡∏ó‡∏µ‡πà‡∏£‡πâ‡∏≤‡∏ô');
            $newBooking = Booking::create($booking);

            // ‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏¥‡∏ß
            return redirect('queueinfo');
        } else {
            $price = $servicePrice->price;
            $booking = [
                'service' => $request->service,
                'time' => $request->time,
                'date' => $request->date,
                'beautician_name' => $request->beautician_name,
                'user_id' => Auth::user()->id,
                'price' => $price,
                'payment_status' => '‡∏£‡∏≠‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô', // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡πÉ‡∏´‡∏°‡πà
            ];

            //$newBooking=DB::table('bookings')->insert($booking);
            $newBooking = Booking::create($booking);
            // $newBooking = DB::table('bookings')->insertGetId($booking);
            Alert::success('‡∏à‡∏≠‡∏á‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à', '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô');
            $stripe = new \Stripe\StripeClient(env('STRIPE_SECRET'));

            $session = $stripe->checkout->sessions->create([
                'payment_method_types' => ['promptpay', 'card'],
                'customer_email' => Auth::user()->email,
                'line_items' => [
                    [
                        'price_data' => [
                            'currency' => 'thb',
                            'unit_amount' => $price * 100, // ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡πÄ‡∏£‡∏ó‡πÄ‡∏ó‡πà‡∏≤‡∏Å‡∏±‡∏ö‡∏™‡∏°‡∏Å‡∏≤‡∏£‡∏´‡∏£‡∏∑‡∏≠‡∏ï‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏Å‡∏≥‡∏´‡∏ô‡∏î
                            'product_data' => [
                                'name' => $selectedService,
                                'description' => "**‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á:**\n „Ö§„Ö§„Ö§„Ö§„Ö§„Ö§„Ö§„Ö§„Ö§„Ö§„Ö§„Ö§„Ö§„Ö§„Ö§„Ö§„Ö§
                            ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà: {$request->date}\n„Ö§„Ö§„Ö§„Ö§„Ö§„Ö§„Ö§„Ö§„Ö§„Ö§„Ö§„Ö§„Ö§„Ö§„Ö§„Ö§„Ö§„Ö§„Ö§
                            ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£: $selectedService\n„Ö§„Ö§„Ö§„Ö§„Ö§„Ö§„Ö§„Ö§„Ö§„Ö§„Ö§„Ö§„Ö§„Ö§„Ö§„Ö§„Ö§„Ö§„Ö§
                            ‡∏ä‡πà‡∏≤‡∏á: {$request->beautician_name}\n„Ö§„Ö§„Ö§„Ö§„Ö§„Ö§„Ö§„Ö§„Ö§„Ö§„Ö§„Ö§„Ö§„Ö§„Ö§„Ö§„Ö§„Ö§„Ö§„Ö§„Ö§
                            ‡πÄ‡∏ß‡∏•‡∏≤: {$request->time}\n", // ‡πÄ‡∏û‡∏¥‡πà‡∏° description

                            ],
                        ],
                        'quantity' => 1,
                    ],
                ],
                'metadata' => [
                    'booking_number' => $newBooking->booking_id,
                    'service' => $selectedService,
                    'date' => $request->date,
                    'time' => $request->time,
                    'beautician_name' => $request->beautician_name,
                    'price' => $price,
                ],
                'submit_type' => 'book',
                'mode' => 'payment',
                'success_url' => route('payment.success') . '?session_id={CHECKOUT_SESSION_ID}', // URL ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
                'cancel_url' => route('payment.cancel'), // URL ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô
            ]);
            if (isset($session->id) && $session->id != '') {
                return redirect($session->url);
            } else {
                return 'cant redirect to url';
            }
        }
    }
    // Create a Payment Intent with Stripe
    // Stripe::setApiKey(env('STRIPE_SECRET'));


    //Payment if success
    public function success(Request $request)
    {
        //$stripe = new \Stripe\StripeClient(env('STRIPE_SECRET'));
        // ‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‡πÄ‡∏ä‡πà‡∏ô ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        //return 'payment-success';
        // ‡∏£‡∏±‡∏ö‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏Å‡∏≤‡∏£‡∏ã‡∏∑‡πâ‡∏≠‡∏´‡∏£‡∏∑‡∏≠‡∏Å‡∏≤‡∏£‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏à‡∏≤‡∏Å Stripe
        if (isset($request->session_id)) {
            // ‡πÉ‡∏ä‡πâ Stripe API ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ç‡∏≠‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô
            $stripe = new \Stripe\StripeClient(env('STRIPE_SECRET'));
            $response = $stripe->checkout->sessions->retrieve($request->session_id);
            // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô
            if ($response->payment_status === 'paid') {
                // ‡∏´‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
                $bookingId = $response->metadata->booking_number;
                $nameuser = Auth::user()->name;
                $date = $response->metadata->date;
                $service = $response->metadata->service;
                $beauticianName = $response->metadata->beautician_name;
                $time = $response->metadata->time;
                $price = $response->metadata->price;
                //dd($response);
                $paymentIntentId = $response->payment_intent;

                // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡πÉ‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á Bookings
                Booking::where('booking_id', $bookingId)->update([
                    'payment_status' => '‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡πÅ‡∏•‡πâ‡∏ß',
                    'payment_intent_id' => $paymentIntentId,

                ]);
                // ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏´‡∏ô‡πâ‡∏≤ payment success
                return view('payment-success', [
                    'nameuser' => $nameuser,
                    'date' => $date,
                    'service' => $service,
                    'beauticianName' => $beauticianName,
                    'time' => $time,
                    'price' => $price,
                ]);
            }
        }
    }

    public function cancel(Request $request)
    {
        // ‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô
        //Alert::warning('‡∏à‡∏≠‡∏á‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡πÅ‡∏•‡πâ‡∏ß', '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô');
        return redirect('queueinfo')->with('info', '‡∏à‡∏≠‡∏á‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡πÅ‡∏•‡πâ‡∏ß ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô');
    }

    //////////////////////////////////////View////////////////////////////////////////
    public function view()
    {
        $request = request();
        $disabled_dates = Holiday::pluck('closed_date')->toArray();
        /*$availableTimes = [
            "10.00->11.00",
            "12.00->13.00",
            "14.00->15.00",
            "19.00->20.00"
        ];*/

        //$availableBeauticians = [
        //  "‡∏ä‡πà‡∏≤‡∏á‡∏ï‡∏π‡∏°‡∏ï‡∏≤‡∏°",
        //"‡∏ä‡πà‡∏≤‡∏á‡∏Å‡∏µ‡πà"
        //];
        $availableTimes = AvailableTime::orderByRaw("CAST(SUBSTRING_INDEX(time_slot, '->', 1) AS TIME)")->pluck('time_slot')->toArray();
        $availableBeauticians = Beautician::all()->pluck('name')->toArray();
        $selectService = Service::all()->pluck('name')->toArray();
        $bookings = Booking::all();

        $selectedService = $request->service;

        $bookedDates = $bookings->where('service', $selectedService)->pluck('date')->toArray();
        $bookedTimes = $bookings->where('service', $selectedService)->pluck('time')->toArray();
        $bookedBeauticians = $bookings->where('service', $selectedService)->pluck('beautician_name')->toArray();

        $selectedDateToBook = date('Y-m-d', ($request->date));

        if (session('error')) {
            Alert::error('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î', session('error'));
        }

        $selectedDate = $request->selected_date ?? $selectedDateToBook;

        $selectedDateToBook = $request->date;
        $servicesPrices = Service::pluck('price', 'name');

        return view('queue', [
            'disabled_dates' => $disabled_dates,
            'availableTimes' => $availableTimes,
            'bookedDates' => $bookedDates,
            'bookedTimes' => $bookedTimes,
            'availableBeauticians' => $availableBeauticians,
            'selectedService' => $selectedService,
            'bookedBeauticians' => $bookedBeauticians,
            'bookings' => $bookings,
            'request' => $request,
            'selectedDate' => $selectedDate,
            'selectedDateToBook' => $selectedDateToBook,
            'selectService' => $selectService,
            'servicesPrices' => $servicesPrices,
        ]);
    }
}
